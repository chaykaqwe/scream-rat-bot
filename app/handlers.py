import asyncio
import random
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile, CallbackQuery, ReplyKeyboardRemove

import keyboard as kb
from bot import bot
import database.reqiest as rq

router = Router(name=__name__)
tasks = {}
reply_events: dict[int, asyncio.Event] = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
active_messages: dict[int, list[int]] = {}


async def delete_active_messages(tg_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if tg_id in active_messages:
        for msg_id in active_messages[tg_id]:
            try:
                await bot.delete_message(tg_id, msg_id)
            except Exception as e:
                print(f"[{tg_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        active_messages[tg_id] = []


@router.message(CommandStart())
async def cmd(mes: Message):
    await mes.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üñê, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –∫—Ä–∏—á–∞—â–∏—é –∫—Ä—ã—Å—ÉüêÄ!', reply_markup=kb.start)


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∫—Ä—ã—Å—ÉüêÄ")
async def start_rat(mes: Message):
    tg_id = mes.from_user.id
    user = await rq.get_user_by_tg_id(tg_id)
    now = datetime.now()
    await rq.rat_deaf(tg_id)
    if not user:
        await rq.commit_user(start_time=now, tg_id=tg_id)
    await base_rat(tg_id)
    asyncio.create_task(scream(tg_id))


async def next_scream(start_time: datetime, days_done: int):
    base = start_time + timedelta(days=days_done)
    window_end = base + timedelta(hours=24) - timedelta(minutes=30)
    total_secs = int((window_end - base).total_seconds())
    return base + timedelta(seconds=random.randint(0, total_secs))


async def scream(tg_id: int):
    user = await rq.get_user_by_tg_id(tg_id)
    if not user or not user.time:
        await asyncio.sleep(5)
        return

    start_time = datetime.fromisoformat(user.time)
    days_done = int(user.days_survival)

    next_send = await next_scream(start_time, days_done)
    wait = (next_send - datetime.now()).total_seconds()

    if wait > 0:
        print(f"[{tg_id}] –∂–¥—ë–º –¥–æ {next_send}")
        await asyncio.sleep(wait)

    await delete_active_messages(tg_id)

    ev = asyncio.Event()
    reply_events[tg_id] = ev

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏–∫
    base_path = r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\scream_rat.gif"
    animation = FSInputFile(base_path)
    anim_msg = await bot.send_animation(tg_id, animation, reply_markup=kb.stop_scream)
    text_msg = await bot.send_message(tg_id, text='AAAAAAAAAA')

    active_messages[tg_id] = [anim_msg.message_id, text_msg.message_id]

    try:
        await asyncio.wait_for(ev.wait(), timeout=60)
    except asyncio.TimeoutError:
        reply_events.pop(tg_id, None)
        await delete_active_messages(tg_id)

        base_path = r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\deaf_rat.gif"
        deaf_animation = FSInputFile(base_path)
        days = await rq.get_days(tg_id)
        await bot.send_animation(tg_id, deaf_animation, caption=f"‚ö∞–í–∞—à–∞ –∫—Ä—ã—Å–∞üêÄ –ø—Ä–æ–∂–∏–ª–∞ {days}ü™¶", reply_markup=kb.start)
        await rq.rat_deaf(tg_id)
        return
    else:
        reply_events.pop(tg_id, None)
        asyncio.create_task(scream(tg_id))


@router.message(F.text == '–ù–ê–ö–û–†–ú–ò–¢–¨ –ë–†–ê–£–ù–òüçÆ')
async def stop_scream(mes: Message):
    tg_id = mes.from_user.id
    ev = reply_events.get(tg_id)
    if ev:
        ev.set()
        await rq.increment_days(tg_id)
        await base_rat(tg_id)


async def base_rat(tg_id: int):
    await delete_active_messages(tg_id)

    base_path = r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\base_rat.gif"
    animation = FSInputFile(base_path)
    days = await rq.get_days(tg_id)
    anim_msg = await bot.send_animation(tg_id, animation, reply_markup=ReplyKeyboardRemove())
    text_msg = await bot.send_message(tg_id, text=f'–í–∞—à–µ –∫—Ä—ã—Å–µ {days} –¥–Ω–µ–π', reply_markup=kb.main)

    active_messages[tg_id] = [anim_msg.message_id, text_msg.message_id]


@router.callback_query(F.data == "squish_rat")
async def squish_rat(callback: CallbackQuery):
    tg_id = callback.from_user.id
    await callback.answer()
    await delete_active_messages(tg_id)

    anim_path = r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\squish_rat.gif"
    animation = FSInputFile(anim_path)
    anim_msg = await callback.message.answer_animation(animation, reply_markup=kb.return_to_main)

    active_messages[tg_id] = [anim_msg.message_id]


@router.callback_query(F.data == 'return_home')
async def return_to_main(callback: CallbackQuery):
    tg_id = callback.from_user.id
    await callback.answer()
    await base_rat(tg_id)


@router.callback_query(F.data == "kill_rat")
async def kill_rat(callback: CallbackQuery):
    tg_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_active_messages(tg_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    await rq.rat_deaf(tg_id)
    days = await rq.get_days(tg_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "—Å–º–µ—Ä—Ç—å" –∫—Ä—ã—Å—ã
    anim_path = r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\deaf_rat.gif"
    animation = FSInputFile(anim_path)
    await callback.message.answer_animation(
        animation=animation,
        caption=f"‚ö∞Ô∏è –í–∞—à–∞ –∫—Ä—ã—Å–∞ –ø—Ä–æ–∂–∏–ª–∞ {days} –¥–Ω–µ–π ü™¶",
        reply_markup=kb.start
    )

    await callback.answer()
