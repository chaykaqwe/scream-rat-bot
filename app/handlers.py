import asyncio
import random
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile, CallbackQuery, ReplyKeyboardRemove

import keyboard as kb
from bot import bot
import database.reqiest as rq

router = Router(name=__name__)
tasks = {}
reply_events: dict[int, asyncio.Event] = {}


@router.message(CommandStart())
async def cmd(mes: Message):
    await mes.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üñê, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –∫—Ä–∏—á–∞—â–∏—é –∫—Ä—ã—Å—ÉüêÄ!', reply_markup=kb.start)


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∫—Ä—ã—Å—ÉüêÄ")
async def start_rat(mes: Message):
    tg_id = mes.from_user.id
    user = await rq.get_user_by_tg_id(tg_id)
    now = datetime.now()
    await rq.rat_deaf(tg_id)
    if not user:
        await rq.commit_user(start_time=now, tg_id=tg_id)
    await base_rat(tg_id)
    asyncio.create_task(scream(tg_id))



async def next_scream(start_time: datetime, days_done: int):
    base = start_time + timedelta(days=days_done)
    window_end = base + timedelta(hours=24) - timedelta(minutes=30)
    total_secs = int((window_end - base).total_seconds())
    return base + timedelta(seconds=random.randint(0, total_secs))


async def scream(tg_id: int):
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∂–¥—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –º–æ–º–µ–Ω—Ç,
    —à–ª—ë–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º days_survival.
    """

    # 1) –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    user = await rq.get_user_by_tg_id(tg_id)
    if not user or not user.time:
        # –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –∂–¥—ë–º, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
        await asyncio.sleep(5)
        return

    # 2) –ü–∞—Ä—Å–∏–º –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É –∏ —Å—á—ë—Ç—á–∏–∫
    start_time = datetime.fromisoformat(user.time)
    days_done = int(user.days_survival)

    # 3) –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
    next_send = await next_scream(start_time, days_done)  # <--- **await** —Ç—É—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    wait = (next_send - datetime.now()).total_seconds()

    # 4) –ñ–¥—ë–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –≤ –±—É–¥—É—â–µ–º)
    if wait > 0:
        print(f"[{tg_id}] –∂–¥—ë–º –¥–æ {next_send}")
        await asyncio.sleep(wait)
    ev = asyncio.Event()
    reply_events[tg_id] = ev
    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    #    –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ base_rat.gif –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é
    base_path = r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\scream_rat.gif"
    animation = FSInputFile(base_path)
    await bot.send_animation(tg_id, animation, reply_markup=kb.stop_scream)
    await bot.send_message(tg_id, text='AAAAAAAAAA')


    try:
        await asyncio.wait_for(ev.wait(), timeout=1 * 60)
    except asyncio.TimeoutError:
        # –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª–æ ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ü–∏–∫–ª
        reply_events.pop(tg_id, None)
        base_path = r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\deaf_rat.gif"
        deaf_animation = FSInputFile(base_path)
        days = await rq.get_days(tg_id)
        await bot.send_animation(tg_id, deaf_animation, caption=f"‚ö∞–í–∞—à–∞ –∫—Ä—ã—Å–∞üêÄ –ø—Ä–æ–∂–∏–ª–∞ {days}ü™¶", reply_markup=kb.start)
        await rq.rat_deaf(tg_id)
        return
    else:
        # –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –≤–æ–≤—Ä–µ–º—è ‚Äî —É–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
        reply_events.pop(tg_id, None)
        asyncio.create_task(scream(tg_id))


@router.message(F.text == '–ù–ê–ö–û–†–ú–ò–¢–¨ –ë–†–ê–£–ù–òüçÆ')
async def stop_scream(mes: Message):
    tg_id = mes.from_user.id
    # –µ—Å–ª–∏ —É –Ω–∞—Å –∂–¥—É—Ç reply –∏–º–µ–Ω–Ω–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å—Ç–∞–≤–∏–º event
    ev = reply_events.get(tg_id)
    ev.set()
    await rq.increment_days(tg_id)
    await base_rat(tg_id)


async def base_rat(tg_id):
    base_path = r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\base_rat.gif"
    animation = FSInputFile(base_path)
    days = await rq.get_days(tg_id)
    await bot.send_animation(tg_id, animation, reply_markup=ReplyKeyboardRemove())
    await bot.send_message(tg_id, text=f'–í–∞—à–µ –∫—Ä—ã—Å–µ {days} –¥–Ω–µ–π', reply_markup=kb.main)


@router.callback_query(F.data == "squish_rat")
async def squish_rat(callback: CallbackQuery):
    animation = FSInputFile(r"C:\Users\User\PycharmProjects\screaming_rat\awesome_project\rats\squish_rat.gif")
    await callback.answer()
    await callback.message.answer_animation(animation, reply_markup=kb.return_to_main)


@router.callback_query(F.data == 'return_home')
async def return_to_main(callback: CallbackQuery):
    tg_id = callback.from_user.id
    await callback.answer()
    await base_rat(tg_id)
